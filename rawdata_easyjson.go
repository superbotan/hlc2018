// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDe6ae8a0DecodeGoV1(in *jlexer.Lexer, out *LikesAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var LikesSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				in.Delim('[')
				if out.Likes == nil {
					if !in.IsDelim(']') {
						out.Likes = make([]struct {
							Liker int32 `json:"liker,required"`
							Likee int32 `json:"likee,required"`
							Ts    int32 `json:"ts,required"`
						}, 0, 5)
					} else {
						out.Likes = []struct {
							Liker int32 `json:"liker,required"`
							Likee int32 `json:"likee,required"`
							Ts    int32 `json:"ts,required"`
						}{}
					}
				} else {
					out.Likes = (out.Likes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Liker int32 `json:"liker,required"`
						Likee int32 `json:"likee,required"`
						Ts    int32 `json:"ts,required"`
					}
					easyjsonDe6ae8a0Decode(in, &v1)
					out.Likes = append(out.Likes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
			LikesSet = true
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !LikesSet {
		in.AddError(fmt.Errorf("key 'likes' is required"))
	}
}
func easyjsonDe6ae8a0EncodeGoV1(out *jwriter.Writer, in LikesAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Likes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Likes {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonDe6ae8a0Encode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LikesAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe6ae8a0EncodeGoV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LikesAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe6ae8a0EncodeGoV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LikesAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe6ae8a0DecodeGoV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LikesAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe6ae8a0DecodeGoV1(l, v)
}
func easyjsonDe6ae8a0Decode(in *jlexer.Lexer, out *struct {
	Liker int32 `json:"liker,required"`
	Likee int32 `json:"likee,required"`
	Ts    int32 `json:"ts,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var LikerSet bool
	var LikeeSet bool
	var TsSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liker":
			out.Liker = int32(in.Int32())
			LikerSet = true
		case "likee":
			out.Likee = int32(in.Int32())
			LikeeSet = true
		case "ts":
			out.Ts = int32(in.Int32())
			TsSet = true
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !LikerSet {
		in.AddError(fmt.Errorf("key 'liker' is required"))
	}
	if !LikeeSet {
		in.AddError(fmt.Errorf("key 'likee' is required"))
	}
	if !TsSet {
		in.AddError(fmt.Errorf("key 'ts' is required"))
	}
}
func easyjsonDe6ae8a0Encode(out *jwriter.Writer, in struct {
	Liker int32 `json:"liker,required"`
	Likee int32 `json:"likee,required"`
	Ts    int32 `json:"ts,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"liker\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Liker))
	}
	{
		const prefix string = ",\"likee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Likee))
	}
	{
		const prefix string = ",\"ts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Ts))
	}
	out.RawByte('}')
}
func easyjsonDe6ae8a0DecodeGoV11(in *jlexer.Lexer, out *AccountUpd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "birth":
			if in.IsNull() {
				in.Skip()
				out.Birth = nil
			} else {
				if out.Birth == nil {
					out.Birth = new(int32)
				}
				*out.Birth = int32(in.Int32())
			}
		case "email":
			out.Email = string(in.String())
		case "fname":
			out.Fname = string(in.String())
		case "sname":
			out.Sname = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "sex":
			out.Sex = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "joined":
			out.Joined = int32(in.Int32())
		case "status":
			out.Status = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Interests = append(out.Interests, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "premium":
			easyjsonDe6ae8a0Decode1(in, &out.Premium)
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				in.Delim('[')
				if out.Likes == nil {
					if !in.IsDelim(']') {
						out.Likes = make([]struct {
							Dt int32 `json:"ts,required"`
							ID int32 `json:"id,required"`
						}, 0, 8)
					} else {
						out.Likes = []struct {
							Dt int32 `json:"ts,required"`
							ID int32 `json:"id,required"`
						}{}
					}
				} else {
					out.Likes = (out.Likes)[:0]
				}
				for !in.IsDelim(']') {
					var v5 struct {
						Dt int32 `json:"ts,required"`
						ID int32 `json:"id,required"`
					}
					easyjsonDe6ae8a0Decode2(in, &v5)
					out.Likes = append(out.Likes, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDe6ae8a0EncodeGoV11(out *jwriter.Writer, in AccountUpd) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Birth != nil {
		const prefix string = ",\"birth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Birth))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Fname != "" {
		const prefix string = ",\"fname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fname))
	}
	if in.Sname != "" {
		const prefix string = ",\"sname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sname))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	if in.Sex != "" {
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sex))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.Joined != 0 {
		const prefix string = ",\"joined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Joined))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if len(in.Interests) != 0 {
		const prefix string = ",\"interests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Interests {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"premium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDe6ae8a0Encode1(out, in.Premium)
	}
	if len(in.Likes) != 0 {
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Likes {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonDe6ae8a0Encode2(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountUpd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe6ae8a0EncodeGoV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountUpd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe6ae8a0EncodeGoV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountUpd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe6ae8a0DecodeGoV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountUpd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe6ae8a0DecodeGoV11(l, v)
}
func easyjsonDe6ae8a0Decode2(in *jlexer.Lexer, out *struct {
	Dt int32 `json:"ts,required"`
	ID int32 `json:"id,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var DtSet bool
	var IDSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ts":
			out.Dt = int32(in.Int32())
			DtSet = true
		case "id":
			out.ID = int32(in.Int32())
			IDSet = true
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !DtSet {
		in.AddError(fmt.Errorf("key 'ts' is required"))
	}
	if !IDSet {
		in.AddError(fmt.Errorf("key 'id' is required"))
	}
}
func easyjsonDe6ae8a0Encode2(out *jwriter.Writer, in struct {
	Dt int32 `json:"ts,required"`
	ID int32 `json:"id,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Dt))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ID))
	}
	out.RawByte('}')
}
func easyjsonDe6ae8a0Decode1(in *jlexer.Lexer, out *struct {
	Start  int32 `json:"start,required"`
	Finish int32 `json:"finish,required"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var StartSet bool
	var FinishSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = int32(in.Int32())
			StartSet = true
		case "finish":
			out.Finish = int32(in.Int32())
			FinishSet = true
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !StartSet {
		in.AddError(fmt.Errorf("key 'start' is required"))
	}
	if !FinishSet {
		in.AddError(fmt.Errorf("key 'finish' is required"))
	}
}
func easyjsonDe6ae8a0Encode1(out *jwriter.Writer, in struct {
	Start  int32 `json:"start,required"`
	Finish int32 `json:"finish,required"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Start))
	}
	{
		const prefix string = ",\"finish\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Finish))
	}
	out.RawByte('}')
}
func easyjsonDe6ae8a0DecodeGoV12(in *jlexer.Lexer, out *AccountFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var AccountsSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accounts":
			if in.IsNull() {
				in.Skip()
				out.Accounts = nil
			} else {
				in.Delim('[')
				if out.Accounts == nil {
					if !in.IsDelim(']') {
						out.Accounts = make([]AccountAdd, 0, 1)
					} else {
						out.Accounts = []AccountAdd{}
					}
				} else {
					out.Accounts = (out.Accounts)[:0]
				}
				for !in.IsDelim(']') {
					var v10 AccountAdd
					(v10).UnmarshalEasyJSON(in)
					out.Accounts = append(out.Accounts, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
			AccountsSet = true
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !AccountsSet {
		in.AddError(fmt.Errorf("key 'accounts' is required"))
	}
}
func easyjsonDe6ae8a0EncodeGoV12(out *jwriter.Writer, in AccountFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Accounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Accounts {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe6ae8a0EncodeGoV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe6ae8a0EncodeGoV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe6ae8a0DecodeGoV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe6ae8a0DecodeGoV12(l, v)
}
func easyjsonDe6ae8a0DecodeGoV13(in *jlexer.Lexer, out *AccountAdd) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var IDSet bool
	var EmailSet bool
	var SexSet bool
	var BirthSet bool
	var JoinedSet bool
	var StatusSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int32(in.Int32())
			IDSet = true
		case "email":
			out.Email = string(in.String())
			EmailSet = true
		case "fname":
			out.Fname = string(in.String())
		case "sname":
			out.Sname = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "sex":
			out.Sex = string(in.String())
			SexSet = true
		case "birth":
			out.Birth = int32(in.Int32())
			BirthSet = true
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "joined":
			out.Joined = int32(in.Int32())
			JoinedSet = true
		case "status":
			out.Status = string(in.String())
			StatusSet = true
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Interests = append(out.Interests, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "premium":
			easyjsonDe6ae8a0Decode1(in, &out.Premium)
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				in.Delim('[')
				if out.Likes == nil {
					if !in.IsDelim(']') {
						out.Likes = make([]struct {
							Dt int32 `json:"ts,required"`
							ID int32 `json:"id,required"`
						}, 0, 8)
					} else {
						out.Likes = []struct {
							Dt int32 `json:"ts,required"`
							ID int32 `json:"id,required"`
						}{}
					}
				} else {
					out.Likes = (out.Likes)[:0]
				}
				for !in.IsDelim(']') {
					var v14 struct {
						Dt int32 `json:"ts,required"`
						ID int32 `json:"id,required"`
					}
					easyjsonDe6ae8a0Decode2(in, &v14)
					out.Likes = append(out.Likes, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.AddError(&jlexer.LexerError{
				Offset: in.GetPos(),
				Reason: "unknown field",
				Data:   key,
			})
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !IDSet {
		in.AddError(fmt.Errorf("key 'id' is required"))
	}
	if !EmailSet {
		in.AddError(fmt.Errorf("key 'email' is required"))
	}
	if !SexSet {
		in.AddError(fmt.Errorf("key 'sex' is required"))
	}
	if !BirthSet {
		in.AddError(fmt.Errorf("key 'birth' is required"))
	}
	if !JoinedSet {
		in.AddError(fmt.Errorf("key 'joined' is required"))
	}
	if !StatusSet {
		in.AddError(fmt.Errorf("key 'status' is required"))
	}
}
func easyjsonDe6ae8a0EncodeGoV13(out *jwriter.Writer, in AccountAdd) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ID))
	}
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Fname != "" {
		const prefix string = ",\"fname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Fname))
	}
	if in.Sname != "" {
		const prefix string = ",\"sname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sname))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sex))
	}
	{
		const prefix string = ",\"birth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Birth))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"joined\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Joined))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if len(in.Interests) != 0 {
		const prefix string = ",\"interests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Interests {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"premium\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDe6ae8a0Encode1(out, in.Premium)
	}
	if len(in.Likes) != 0 {
		const prefix string = ",\"likes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.Likes {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonDe6ae8a0Encode2(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountAdd) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDe6ae8a0EncodeGoV13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountAdd) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDe6ae8a0EncodeGoV13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountAdd) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDe6ae8a0DecodeGoV13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountAdd) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDe6ae8a0DecodeGoV13(l, v)
}
